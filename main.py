import telebot
from telebot import types
import openai
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}
user_free_uses = {}

# === –•–ï–ù–î–õ–ï–† –°–¢–ê–†–¢–ê ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_free_uses[message.chat.id] = 3  # –¥–∞—ë–º 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ü—Ä–æ–º—Ç –ø–æ–¥ –ª—é–±—É—é —Å—Ñ–µ—Ä—É", callback_data="any"),
        types.InlineKeyboardButton("Telegram –ø–æ—Å—Ç", callback_data="tg"),
        types.InlineKeyboardButton("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", callback_data="mkt"),
        types.InlineKeyboardButton("–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥", callback_data="copy"),
        types.InlineKeyboardButton("E-commerce", callback_data="ecom")
    )
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", reply_markup=markup)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    user_state[call.message.chat.id] = call.data
    bot.send_message(call.message.chat.id, "üß† –ù–∞–ø–∏—à–∏, –¥–ª—è —á–µ–≥–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω –ø—Ä–æ–º—Ç:")

# === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.chat.id
    if user_id not in user_state:
        return bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: /start")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if user_free_uses.get(user_id, 0) <= 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîì –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://your-payment-link.com"))
        return bot.send_message(user_id, "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–º—Ç–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø:", reply_markup=markup)

    prompt = message.text
    category = user_state[user_id]
    full_prompt = f"–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}. –°–æ–∑–¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –ø—Ä–æ–º—Ç –ø–æ —Ç–µ–º–µ: {prompt}"

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": full_prompt}]
        )
        result = response['choices'][0]['message']['content']
    except Exception as e:
        return bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")

    user_free_uses[user_id] -= 1
    bot.send_message(user_id, f"üîπ –ì–æ—Ç–æ–≤–æ!\n\n{result}\n\n‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_free_uses[user_id]} –∏–∑ 3")

# === –ó–ê–ü–£–°–ö ===
bot.polling(none_stop=True)
