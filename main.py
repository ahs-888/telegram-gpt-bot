import telebot
from telebot import types
from openai import OpenAI
import os

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

user_state = {}
user_free_uses = {}

AGENTS = {
    "presentations": """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–∏–∑–Ω–µ—Å-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π.

üîç –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
- –ü–∏—Ä–∞–º–∏–¥–∞ –ú–∏–Ω—Ç–æ, –º–µ—Ç–æ–¥—ã McKinsey, BCG
- MECE, SWOT, 2x2, Roadmap
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Ç–∏–ª—å, –ª–æ–≥–∏–∫–∞, –≤–∏–∑—É–∞–ª

üß† –¢—ã —É–º–µ–µ—à—å:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é
- –î–µ–ª–∞—Ç—å –ø–ª–∞–Ω –∏ —Å–ª–∞–π–¥—ã
- –°–æ–∑–¥–∞–≤–∞—Ç—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏

–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ø—Ä–æ—Å–∏:
‚Äì –ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏?
‚Äì –ö—Ç–æ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?
‚Äì –°–∫–æ–ª—å–∫–æ —Å–ª–∞–π–¥–æ–≤?
‚Äì –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç—Å—è?
"""
}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_free_uses[message.chat.id] = 3
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", callback_data="presentations"),
        types.InlineKeyboardButton("–ü—Ä–æ–º—Ç –ø–æ–¥ –ª—é–±—É—é —Å—Ñ–µ—Ä—É", callback_data="any"),
        types.InlineKeyboardButton("Telegram –ø–æ—Å—Ç", callback_data="tg"),
        types.InlineKeyboardButton("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", callback_data="mkt"),
        types.InlineKeyboardButton("–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥", callback_data="copy"),
        types.InlineKeyboardButton("E-commerce", callback_data="ecom")
    )
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    user_state[call.message.chat.id] = call.data
    bot.send_message(call.message.chat.id, "üß† –ù–∞–ø–∏—à–∏, –¥–ª—è —á–µ–≥–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω –ø—Ä–æ–º—Ç:")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.chat.id
    if user_id not in user_state:
        return bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: /start")

    if user_free_uses.get(user_id, 0) <= 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîì –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://your-payment-link.com"))
        return bot.send_message(user_id, "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–º—Ç–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø:", reply_markup=markup)

    prompt = message.text
    category = user_state[user_id]
    if category == "presentations":
        system_message = AGENTS["presentations"]
    else:
        system_message = f"–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}. –°–æ–∑–¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –ø—Ä–æ–º—Ç –ø–æ —Ç–µ–º–µ: {prompt}"

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt}
            ]
        )
        result = response.choices[0].message.content
    except Exception as e:
        return bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")

    user_free_uses[user_id] -= 1
    bot.send_message(user_id, f"üîπ –ì–æ—Ç–æ–≤–æ!\n\n{result}\n\n‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_free_uses[user_id]} –∏–∑ 3")

bot.polling(none_stop=True)
